import { useLocation } from 'react-router-dom';
import Layout from '../components/Layout';

function Detail() {
  const location = useLocation();

  let query: string = location.state.query;
  query = query.trim();

  return (
      <Layout>
        {/* <MdictComponent data={{ prefix: ['~汉'], related: ['~韓'] }}/> */}
        软件产品能够从最初的面向专业用途，逐渐发展出如今广大的面向消费者的市场，友好美观的 UI 交互页面发挥了无可替代的作用。不仅软件开发工具在不断优化 UI 设计开发的功能，编程语言本身的发展也受到了其影响。
在 2014 年，苹果推出了新的编程语言 Swift 以取代 Objective-C，引入了更多的现代编程语言特性，并在 2019 年推出了基于 Swift 的声明式 UI 框架 SwiftUI。在 2016 年，Jetbrains 也发布了面向 JVM 的新语言 Kotlin，并在随后被谷歌选为安卓应用的首选开发语言。以 Kotlin 为基础，谷歌也推出了针对安卓平台的 UI 开发工具包 Jetpack Compose。在跨平台领域，谷歌设计了全新的 Dart 语言，作为 UI 框架的 Flutter 使用的主要语言活跃至今。
而对于老牌编程语言 Java 来说，其编写 UI 的体验早已被 iOS、安卓等平台下新的语言和框架拉开了差距。在基于 Java 的开发中，同样有诸多辅助包和工具：JavaFX 虽然以 Java 为平台，但选择了使用 XML 来定义 UI 页面；AWT、Swing 和 Eclipse SWT 都使用 Java 语言直接编写 UI，但都是命令式 UI 的实现方式，使得开发者在编写 UI 时并不能专注于 UI 本身的设计，而是将更多的精力花费在了实例化元件、组成完整页面以及 UI 更新变化的控制。这既是 UI 框架设计和技术选型带来的问题，也体现出了 Java 语言本身不够灵活的地方。
即使在 UI 编写上存在不便甚至不足，Java 仍然是跨平台、尤其是桌面平台开发的热门语言。本项目的目标是提升以 Java 为平台语言的 UI 编写功能，支持响应式 UI 风格的编写方式。项目设计一种新的简单编程语言「Air」，接管 UI 编写的部分，通过与 Java 语言程序之间的互操作功能，实现与 Java 项目的整合。
软件产品能够从最初的面向专业用途，逐渐发展出如今广大的面向消费者的市场，友好美观的 UI 交互页面发挥了无可替代的作用。不仅软件开发工具在不断优化 UI 设计开发的功能，编程语言本身的发展也受到了其影响。
在 2014 年，苹果推出了新的编程语言 Swift 以取代 Objective-C，引入了更多的现代编程语言特性，并在 2019 年推出了基于 Swift 的声明式 UI 框架 SwiftUI。在 2016 年，Jetbrains 也发布了面向 JVM 的新语言 Kotlin，并在随后被谷歌选为安卓应用的首选开发语言。以 Kotlin 为基础，谷歌也推出了针对安卓平台的 UI 开发工具包 Jetpack Compose。在跨平台领域，谷歌设计了全新的 Dart 语言，作为 UI 框架的 Flutter 使用的主要语言活跃至今。
而对于老牌编程语言 Java 来说，其编写 UI 的体验早已被 iOS、安卓等平台下新的语言和框架拉开了差距。在基于 Java 的开发中，同样有诸多辅助包和工具：JavaFX 虽然以 Java 为平台，但选择了使用 XML 来定义 UI 页面；AWT、Swing 和 Eclipse SWT 都使用 Java 语言直接编写 UI，但都是命令式 UI 的实现方式，使得开发者在编写 UI 时并不能专注于 UI 本身的设计，而是将更多的精力花费在了实例化元件、组成完整页面以及 UI 更新变化的控制。这既是 UI 框架设计和技术选型带来的问题，也体现出了 Java 语言本身不够灵活的地方。
即使在 UI 编写上存在不便甚至不足，Java 仍然是跨平台、尤其是桌面平台开发的热门语言。本项目的目标是提升以 Java 为平台语言的 UI 编写功能，支持响应式 UI 风格的编写方式。项目设计一种新的简单编程语言「Air」，接管 UI 编写的部分，通过与 Java 语言程序之间的互操作功能，实现与 Java 项目的整合。
软件产品能够从最初的面向专业用途，逐渐发展出如今广大的面向消费者的市场，友好美观的 UI 交互页面发挥了无可替代的作用。不仅软件开发工具在不断优化 UI 设计开发的功能，编程语言本身的发展也受到了其影响。
在 2014 年，苹果推出了新的编程语言 Swift 以取代 Objective-C，引入了更多的现代编程语言特性，并在 2019 年推出了基于 Swift 的声明式 UI 框架 SwiftUI。在 2016 年，Jetbrains 也发布了面向 JVM 的新语言 Kotlin，并在随后被谷歌选为安卓应用的首选开发语言。以 Kotlin 为基础，谷歌也推出了针对安卓平台的 UI 开发工具包 Jetpack Compose。在跨平台领域，谷歌设计了全新的 Dart 语言，作为 UI 框架的 Flutter 使用的主要语言活跃至今。
而对于老牌编程语言 Java 来说，其编写 UI 的体验早已被 iOS、安卓等平台下新的语言和框架拉开了差距。在基于 Java 的开发中，同样有诸多辅助包和工具：JavaFX 虽然以 Java 为平台，但选择了使用 XML 来定义 UI 页面；AWT、Swing 和 Eclipse SWT 都使用 Java 语言直接编写 UI，但都是命令式 UI 的实现方式，使得开发者在编写 UI 时并不能专注于 UI 本身的设计，而是将更多的精力花费在了实例化元件、组成完整页面以及 UI 更新变化的控制。这既是 UI 框架设计和技术选型带来的问题，也体现出了 Java 语言本身不够灵活的地方。
即使在 UI 编写上存在不便甚至不足，Java 仍然是跨平台、尤其是桌面平台开发的热门语言。本项目的目标是提升以 Java 为平台语言的 UI 编写功能，支持响应式 UI 风格的编写方式。项目设计一种新的简单编程语言「Air」，接管 UI 编写的部分，通过与 Java 语言程序之间的互操作功能，实现与 Java 项目的整合。
软件产品能够从最初的面向专业用途，逐渐发展出如今广大的面向消费者的市场，友好美观的 UI 交互页面发挥了无可替代的作用。不仅软件开发工具在不断优化 UI 设计开发的功能，编程语言本身的发展也受到了其影响。
在 2014 年，苹果推出了新的编程语言 Swift 以取代 Objective-C，引入了更多的现代编程语言特性，并在 2019 年推出了基于 Swift 的声明式 UI 框架 SwiftUI。在 2016 年，Jetbrains 也发布了面向 JVM 的新语言 Kotlin，并在随后被谷歌选为安卓应用的首选开发语言。以 Kotlin 为基础，谷歌也推出了针对安卓平台的 UI 开发工具包 Jetpack Compose。在跨平台领域，谷歌设计了全新的 Dart 语言，作为 UI 框架的 Flutter 使用的主要语言活跃至今。
而对于老牌编程语言 Java 来说，其编写 UI 的体验早已被 iOS、安卓等平台下新的语言和框架拉开了差距。在基于 Java 的开发中，同样有诸多辅助包和工具：JavaFX 虽然以 Java 为平台，但选择了使用 XML 来定义 UI 页面；AWT、Swing 和 Eclipse SWT 都使用 Java 语言直接编写 UI，但都是命令式 UI 的实现方式，使得开发者在编写 UI 时并不能专注于 UI 本身的设计，而是将更多的精力花费在了实例化元件、组成完整页面以及 UI 更新变化的控制。这既是 UI 框架设计和技术选型带来的问题，也体现出了 Java 语言本身不够灵活的地方。
即使在 UI 编写上存在不便甚至不足，Java 仍然是跨平台、尤其是桌面平台开发的热门语言。本项目的目标是提升以 Java 为平台语言的 UI 编写功能，支持响应式 UI 风格的编写方式。项目设计一种新的简单编程语言「Air」，接管 UI 编写的部分，通过与 Java 语言程序之间的互操作功能，实现与 Java 项目的整合。
     
      </Layout>
  );
}


export default Detail;